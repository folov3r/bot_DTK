import asyncio
import logging
import types
from aiogram.enums import ParseMode
from aiogram.filters.command import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram import F
from click.formatting import measure_table
from all_texts import admin_comm
from all_texts import help_message, start_message, text_log, zvon_schedule
from other_def import *

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN_TEST")
YANDEX_TOKEN = os.getenv("YANDEX_TOKEN")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("log/log.txt", encoding='utf-8-sig'),
        logging.StreamHandler()
    ]
)

logging.getLogger("apscheduler").setLevel(logging.WARNING)
logging.getLogger("aiogram").setLevel(logging.WARNING)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()


yadisk_client = yadisk.Client(token=YANDEX_TOKEN)

if yadisk_client.check_token():
    logging.info("Valid API Yandex? True")
else:
    logging.info("Valid API Yandex? False")

logging.getLogger("yadisk").setLevel(logging.WARNING)

ROLE_ADMIN = 1
ROLE_SECONDARY_ADMIN = 2
ROLE_MAIN_ADMIN = 3


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
def has_role(required_role: int):
    def decorator(func):
        async def wrapper(message: types.Message, *args, **kwargs):
            user_id = message.from_user.id
            user_role = get_admin_role(user_id)
            if user_role >= required_role:
                return await func(message, *args, **kwargs)
            await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

        return wrapper

    return decorator


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(Command("add_admin"))
@has_role(ROLE_SECONDARY_ADMIN)
async def set_role(message: types.Message, **kwargs):
    try:
        _, user_id, username, role = message.text.split()
        user_id = int(user_id)
        role = int(role)
        username = str(username)

        role_admin = get_admin_role(message.from_user.id)
        if role_admin >= role:
            if role not in [ROLE_ADMIN, ROLE_SECONDARY_ADMIN, ROLE_MAIN_ADMIN]:
                await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞.")
                return
            add_admin(user_id, username, role, message.from_user.username)
            logging.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –Ω–∞–∑–Ω–∞—á–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å —É—Ä–æ–≤–Ω–µ–º –¥–æ—Å—Ç—É–ø–∞ {role}")
            await message.answer(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ {role} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
        else:
            await message.answer(
                f"‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —É—Ä–æ–≤–Ω–µ–º –¥–æ—Å—Ç—É–ø–∞ {role} –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            logging.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –ø–æ–ø—ã—Ç–∞–ª—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å —É—Ä–æ–≤–Ω–µ–º –¥–æ—Å—Ç—É–ø–∞ {role}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


# –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(Command("remove_admin"))
@has_role(ROLE_SECONDARY_ADMIN)
async def remove_admin(message: types.Message, **kwargs):
    try:
        _, user_id = message.text.split()
        user_id = int(user_id)
        admin_role = get_admin_role(message.from_user.id)
        remove_admin_role = get_admin_role(user_id)
        username_remove_admin = get_username_admin(user_id)
        if admin_role >= remove_admin_role:
            remove_admin_def(user_id)
            logging.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –æ—Ç–æ–∑–≤–∞–ª –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username_remove_admin}")
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username_remove_admin} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        else:
            logging.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {username_remove_admin}")
            await message.answer(
                f"‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –≤—ã—à–µ –≤–∞—à–µ–≥–æ")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@dp.message(Command("list_admins"))
@has_role(ROLE_ADMIN)
async def list_admins(message: types.Message, **kwargs):
    admins = get_all_admins()
    if not admins:
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    admins_list = "\n".join(
        [f"|üÜî: {user_id}| |@ : {username}| |status: {role}| |who add: @{who_add}|" for user_id, username, role, who_add in admins])
    await message.answer(f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n{admins_list}")


# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–± users
@dp.message(Command("broadcast"))
@has_role(ROLE_SECONDARY_ADMIN)
async def broadcast_message(message: types.Message, **kwargs):
    try:
        text_to_send = message.text.split(maxsplit=1)[1]
    except IndexError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>")
        return

    users = get_all_users_id()
    if not users:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    success_count = 0
    failed_count = 0

    for user_id in users:
        try:
            await bot.send_message(user_id, text_to_send)
            success_count += 1
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed_count += 1

    await message.answer(
        f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}"
    )


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(Command("list_users"))
@has_role(ROLE_SECONDARY_ADMIN)
async def list_users_1(message: types.Message, **kwargs):
    users = get_all_users_data()

    if not users:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    else:
        await save_list_users(message, users)
        await message.answer(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n –°–ø–∏—Å–æ–∫ –∫–∞–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=choose_list_users)
        user_states["list_users"][message.from_user.id] = message.from_user.username

@dp.message(lambda message: message.from_user.id in user_states["list_users"])
async def list_users(message: types.Message, **kwargs):
    users = get_all_users_data()

    if not users:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    count_users = len(users)
    students = [user for user in users if user[3] == 0]
    teachers = [user for user in users if user[3] == 1]

    students_list = "\n".join(
        f"|üÜî: {user_id}| |üë§: @{username}| |–ì—Ä—É–ø–ø–∞: {value}| |üîî: {notifications_enabled}|"
        for user_id, username, value, _, notifications_enabled in students
    )

    teachers_list = "\n".join(
        f"|üÜî: {user_id}| |üë§: @{username}| |–§–ò–û: {value}| |üîî: {notifications_enabled}|"
        for user_id, username, value, _, notifications_enabled in teachers
    )
    if message.text == "–°—Ç—É–¥–µ–Ω—Ç–æ–≤":
        await send_users_paginated(message, students, page=0)
        del user_states["list_users"][message.from_user.id]
    elif message.text == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π":
        await send_users_paginated(message, teachers, page=0)
        del user_states["list_users"][message.from_user.id]
    await message.answer(
        f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_users}\n\n"
        f"–°—Ç—É–¥–µ–Ω—Ç—ã (–≤—Å–µ–≥–æ: {len(students)}):\n{students_list}\n\n"
        f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ (–≤—Å–µ–≥–æ: {len(teachers)}):\n{teachers_list}"
    )

@dp.callback_query(lambda c: c.data.startswith("users_page_"))
async def process_users_pagination(callback_query: types.CallbackQuery):
    page = int(callback_query.data.split("_")[-1])
    users = get_all_users_data()
    await send_users_paginated(callback_query.message, users, page)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith("main_menu"))
async def go_main_menu(callback_query: types.CallbackQuery):
    await callback_query.message.delete()  # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard)
    await callback_query.answer()  # –û—Ç–≤–µ—Ç –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ –≤–∏–¥–µ txt —Ñ–∞–π–ª–∞
@dp.message(Command("logs_txt"))
@has_role(ROLE_SECONDARY_ADMIN)
async def send_logs(message: types.Message, **kwargs):
    file_name = 'log/log.txt'
    file_from_pc = FSInputFile(file_name)
    await message.answer_document(file_from_pc)


# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message(Command("admin"))
@has_role(ROLE_ADMIN)
async def send_admin_commands(message: types.Message, **kwargs):
    await message.answer(admin_comm)


add_admin(6142823280, "@folov3r", ROLE_MAIN_ADMIN, "folov3r")


@dp.message(Command("login"))
async def login(message: types.Message, **kwargs):
    user_id = message.from_user.id
    username = message.from_user.username or "No username"

    user_states["login"][user_id] = username

    role_keyboard = create_keyboard([["–°—Ç—É–¥–µ–Ω—Ç", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"]])
    await message.answer("–ö—Ç–æ –≤—ã?\n–°—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å?", reply_markup=role_keyboard)


# –ü–æ–ª—É—á–µ–Ω–∏–µ role –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(lambda message: message.from_user.id in user_states["login"])
async def ask_for_value(message: types.Message, **kwargs):
    user_id = message.from_user.id
    role = message.text

    if role == "–°—Ç—É–¥–µ–Ω—Ç":
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å.\n–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –≥—Ä—É–ø–ø—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Å–æ–±–ª—é–¥–∞—è —Ä–µ–≥–∏—Å—Ç—Ä –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n‚úÖ –û–ü-2 ‚úÖ\n‚ùå –æ–ø 2; –û–ø2; –æ–ü-2 ‚ùå",
            reply_markup=return_keyboard)
        user_states["chose_role"][user_id] = role
        del user_states["login"][user_id]
    elif role == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò.–ò.).", reply_markup=return_keyboard)
        user_states["chose_role"][user_id] = role
        del user_states["login"][user_id]
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏")
        return


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ value –∏ role –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ login
@dp.message(lambda message: message.from_user.id in user_states["chose_role"])
async def save_inform(message: types.Message, **kwargs):
    user_id = message.from_user.id
    value = message.text
    role = user_states["chose_role"][user_id]
    username = message.from_user.username
    if value == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
        del user_states["chose_role"][user_id]
        await login(message)
    else:
        if role == "–°—Ç—É–¥–µ–Ω—Ç":
            validated_group, is_valid = validate_and_correct_group(value)
            if is_valid:
                save_user_data(user_id, message.from_user.username, validated_group, is_teacher=0)
                await message.reply(
                    f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {validated_group}.",
                    reply_markup=main_keyboard)
                del user_states["chose_role"][user_id]
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç, –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!")
            else:
                await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã —Å–Ω–æ–≤–∞.")
                return
        elif role == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
            save_user_data(user_id, message.from_user.username, value, is_teacher=1)
            await message.reply(
                f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {value}",
                reply_markup=main_keyboard)
            del user_states["chose_role"][user_id]
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message, **kwargs):
    user_id = message.from_user.id
    value, is_teacher, notification_enabled = get_user_data(user_id)
    username = message.from_user.username
    if value is None or is_teacher is None:
        await message.answer("–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –ø—Ä–æ–ø–∏—Å–∞–≤ /login.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å, –±—É–¥—É—á–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º")
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    if notification_enabled == 1:
        notification_enabled = '–í–∫–ª—é—á–µ–Ω–∞'
    else:
        notification_enabled = "–í—ã–∫–ª—é—á–µ–Ω–∞"

    if is_teacher == 0:
        is_teacher = "–°—Ç—É–¥–µ–Ω—Ç"
    else:
        is_teacher = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
    sent_message = await message.answer(f"""–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
üë§–í–∞—à —é–∑: @{message.from_user.username}
üë•–†–æ–ª—å: {is_teacher}
‚ùì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ: {value}
üì©–ê–≤—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞: {notification_enabled}""", reply_markup=profile_keyboard)
    user_states["profile_edit"][user_id] = user_id
    profile_messages[user_id] = sent_message.message_id


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Ñ–∏–ª—è
@dp.message(lambda message: message.from_user.id in user_states["profile_edit"])
async def edit_profile_user(message: types.Message, **kwargs):
    text_message = message.text
    user_id = message.from_user.id
    value, is_teacher, notifications_enabled = get_user_data(user_id)
    username = message.from_user.username
    if text_message == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        remove_user_def(user_id)
        del user_states["profile_edit"][user_id]
        await login(message)
    elif text_message == "–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç":
        username = message.from_user.username
        user_states["delete_user"][user_id] = username
        await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?', reply_markup=yes_no_keyboard)
        del user_states["profile_edit"][user_id]
    elif text_message == "–ê–≤—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞":
        if notifications_enabled == 1:
            user_id = message.from_user.id
            disable_notify(user_id)
            await message.answer("üîï–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ãüîï")
        else:
            user_id = message.from_user.id
            enable_notify(user_id)
            await message.answer("üîî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ãüîî")
        if user_id in profile_messages:
            try:
                await bot.delete_message(chat_id=user_id, message_id=profile_messages[user_id])
                del profile_messages[user_id]
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await profile(message)
    elif text_message == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
        del user_states["profile_edit"][user_id]
        await message.answer(
            "–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –∏–ª–∏ –∂–∞–ª–æ–±—É –ø–æ –ø–æ–≤–æ–¥—É —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞, –º—ã –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏–º –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:",
            reply_markup=back_feedback_keyboard)
        user_states["feedback"][user_id] = username
    elif text_message == "–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã":
        await favorite_groups_show(message)
    elif text_message == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard)
        del user_states["profile_edit"][user_id]
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤–∏–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ",reply_markup=profile_keyboard)
    try:
        await bot.delete_message(chat_id=user_id, message_id=message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

@dp.callback_query(lambda c: c.data.startswith("remove_favorite_"))
async def handle_remove_favorite(callback_query: types.CallbackQuery):
    group_name = callback_query.data.split("_")[-1]
    user_id = callback_query.from_user.id

    # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
    remove_favorite_group(user_id, group_name)
    await callback_query.answer(f"–ì—Ä—É–ø–ø–∞ {group_name} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö.")
    await callback_query.message.edit_reply_markup(reply_markup=create_favorite_groups_keyboard(user_id))

@dp.callback_query(lambda c: c.data == "add_favorite_group")
async def handle_add_favorite_group(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ:", reply_markup=cancel_keyboard)
    user_states["add_favorite_group"][callback_query.from_user.id] = callback_query.from_user.username
    try:
        await bot.delete_message(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    await callback_query.answer()

@dp.message(lambda message: message.from_user.id in user_states["add_favorite_group"])
async def handle_add_favorite_group_input(message: types.Message):
    group_name = message.text
    user_id = message.from_user.id

    if group_name == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await favorite_groups_show(message, cancle = True)
        del user_states["add_favorite_group"][user_id]
        return
    else:
        validated_group, is_valid = validate_and_correct_group(group_name)
        if is_valid:
            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
            group_name = validated_group
            add_favorite_group(user_id, group_name)
            await message.answer(f"–ì—Ä—É–ø–ø–∞ {group_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ.", reply_markup=main_keyboard)
            del user_states["add_favorite_group"][user_id]
        else:
            await message.answer("–í–≤–µ–¥–µ–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≥—Ä—É–ø–ø–∞. –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É")
            return

@dp.callback_query(lambda c: c.data == "back_to_profile")
async def back_to_profile_def(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    user_id = callback_query.from_user.id
    value, is_teacher, notification_enabled = get_user_data(user_id)
    username = callback_query.from_user.username
    if value is None or is_teacher is None:
        await callback_query.message.answer("–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –ø—Ä–æ–ø–∏—Å–∞–≤ /login.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å, –±—É–¥—É—á–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º")
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    if notification_enabled == 1:
        notification_enabled = '–í–∫–ª—é—á–µ–Ω–∞'
    else:
        notification_enabled = "–í—ã–∫–ª—é—á–µ–Ω–∞"

    if is_teacher == 0:
        is_teacher = "–°—Ç—É–¥–µ–Ω—Ç"
    else:
        is_teacher = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
    sent_message = await callback_query.message.answer(f"""–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
üë§–í–∞—à —é–∑: @{username}
üë•–†–æ–ª—å: {is_teacher}
‚ùì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ: {value}
üì©–ê–≤—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞: {notification_enabled}""", reply_markup=profile_keyboard)
    user_states["profile_edit"][user_id] = user_id
    profile_messages[user_id] = sent_message.message_id
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ –≥–ª–∞–≤ –∞–¥–º–∏–Ω—É (—É–∫–∞–∑–∞–Ω id –≥–ª–∞–≤ –∞–¥–º–∏–Ω–∞ folov3r, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç)
@dp.message(lambda message: message.from_user.id in user_states["feedback"])
async def process_feedback(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    feedback = message.text
    if feedback == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é":
        del user_states["feedback"][user_id]
        await message.answer("–ì–ª–∞–≤–Ω–∞—è:", reply_markup=main_keyboard)
    else:
        await bot.send_message(chat_id=6142823280, text=f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç @{username}:\n\n{feedback}")
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!", reply_markup=main_keyboard)
        del user_states["feedback"][user_id]


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–¥
@dp.message(lambda message: message.from_user.id in user_states["delete_user"])
async def delete_conf_def(message: types.Message, **kwargs):
    text = message.text
    user_id = message.from_user.id
    if text == '–î–∞':
        remove_user_def(user_id)
        await message.answer(
            '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Å–µ–±—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ–ø–∏—Å–∞–≤ /login, –∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞.\n–£–¥–∞—á–∏, –¥–æ —Å–∫–æ—Ä–æ–≥–æ üëã',
            reply_markup=login_lvl_1_keyboard)
    else:
        await message.answer('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–ª–∏—Å—å!', reply_markup=main_keyboard)

    del user_states["delete_user"][user_id]


@dp.message(Command("start"))
async def cmd_start(message: types.Message, **kwargs):
    check_id = get_all_users_id()
    if message.from_user.id in check_id:
        await message.answer(start_message, reply_markup=main_keyboard, parse_mode=ParseMode.HTML)
    else:
        await message.answer(start_message, parse_mode=ParseMode.HTML)
        await message.answer(
            "–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º, –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /login ",
            reply_markup=login_lvl_1_keyboard)


# –í—ã–∑–æ–≤ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(Command("help"))
async def cmd_help(message: types.Message, **kwargs):
    await message.answer(help_message)


# "–ø–∞—Å—Ö–∞–ª–∫–∞"
@dp.message(F.text == "Lain")
async def egg_lain(message: types.Message, **kwargs):
    image_from_pc = FSInputFile("lain.jpg")
    await message.answer_photo(image_from_pc)
    await message.answer("No matter where you are. Everyone is always connected")


# "–ø–∞—Å—Ö–∞–ª–∫–∞"
@dp.message(F.text == 'Me')
async def egg_me(message: types.Message):
    await message.answer("everything for everyone")


# /change - –ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–æ—Ç–µ (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–µ–∫—Å—Ç –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ all_texts)
@dp.message(Command("change"))
async def send_change_logs(message: types.Message, **kwargs):
    await message.reply(text_log, parse_mode=ParseMode.HTML)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –¥–µ–Ω—å
@dp.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def check_schedule(message: types.Message, **kwargs):
    username = message.from_user.username
    user_id = message.from_user.id
    user_states["check_schedule"][user_id] = username
    await message.reply("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞:", reply_markup=schedule_keyboard)


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.message(lambda message: message.from_user.id in user_states["check_schedule"])
async def check_schedule1(message: types.Message, **kwargs):
    username = message.from_user.username
    user_id = message.from_user.id
    text = message.text
    if text == "–°–µ–≥–æ–¥–Ω—è":
        del user_states["check_schedule"][user_id]
        await send_schedule(message, days_offset=0, caption="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        await send_schedule(message, days_offset=0, caption="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", send_as_text=True)
    elif text == "–ó–∞–≤—Ç—Ä–∞":
        del user_states["check_schedule"][user_id]
        await send_schedule(message, days_offset=1, caption="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
        await send_schedule(message, days_offset=1, caption="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", send_as_text=True)
    elif text == "–ü–æ—Å–ª–µ –∑–∞–≤—Ç—Ä–∞":
        del user_states["check_schedule"][user_id]
        await send_schedule(message, days_offset=2, caption="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤—Ç—Ä–∞")
        await send_schedule(message, days_offset=2, caption="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤—Ç—Ä–∞", send_as_text=True)
    elif text == "–î—Ä—É–≥–∞—è –¥–∞—Ç–∞":
        del user_states["check_schedule"][user_id]
        user_states["other_date"][user_id] = username
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥", reply_markup=cancel_keyboard)
    elif text == "–î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞":
        del user_states["check_schedule"][user_id]
        user_states["check_another_group"][user_id] = username
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≥—Ä—É–ø–ø—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", reply_markup=return_keyboard)
    elif text == "–û—Ç–º–µ–Ω–∞":
        del user_states["check_schedule"][user_id]
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏")

@dp.message(lambda message: message.from_user.id in user_states["check_another_group"])
async def check_schedule_another_group(message: types.Message):
    user_id = message.from_user.id
    user_input = message.text
    if user_input == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
        del user_states["check_another_group"][user_id]
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞:", reply_markup=schedule_keyboard)
        user_states["check_schedule"][user_id] = message.from_user.username
    else:
        validated_group, is_valid = validate_and_correct_group(user_input)
        if is_valid:
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É', reply_markup=schedule_keyboard_another_group)
            user_states["set_group_num"][user_id] = validated_group
            del user_states["check_another_group"][user_id]
            logging.info(f"{user_states["set_group_num"].get(user_id)}")
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã —Å–Ω–æ–≤–∞.")
            return

@dp.message(lambda message: message.from_user.id in user_states["set_group_num"])
async def send_schedule_another_group(message: types.Message):
    user_id = message.from_user.id
    group_name = user_states["set_group_num"].get(user_id)
    text = message.text
    if text == "–°–µ–≥–æ–¥–Ω—è":
        del user_states["set_group_num"][user_id]
        await send_schedule_choose_group(message, group_name=group_name, days_offset=0, caption="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        await send_schedule_choose_group(message, group_name=group_name, days_offset=0, caption="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", send_as_text=True)
    elif text == "–ó–∞–≤—Ç—Ä–∞":
        del user_states["set_group_num"][user_id]
        await send_schedule_choose_group(message, group_name=group_name, days_offset=1, caption="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
        await send_schedule_choose_group(message, group_name=group_name, days_offset=1, caption="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", send_as_text=True)
    elif text == "–ü–æ—Å–ª–µ –∑–∞–≤—Ç—Ä–∞":
        del user_states["set_group_num"][user_id]
        await send_schedule_choose_group(message, group_name=group_name, days_offset=2, caption="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤—Ç—Ä–∞")
        await send_schedule_choose_group(message, group_name=group_name, days_offset=2, caption="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤—Ç—Ä–∞", send_as_text=True)
    elif text == "–î—Ä—É–≥–∞—è –¥–∞—Ç–∞":
        del user_states["set_group_num"][user_id]
        user_states["other_date_another_group"][user_id] = group_name
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥", reply_markup=cancel_keyboard)
    elif text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
        del user_states["set_group_num"][user_id]
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞:", reply_markup=schedule_keyboard)
        user_states["check_schedule"][user_id] = message.from_user.username
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏")
        return

@dp.message(lambda message: message.from_user.id in user_states["other_date_another_group"])
async def check_other_date_for_another_group(message: types.Message, **kwargs):
    user_id = message.from_user.id
    text = message.text
    file_name = f'schedule/{text}.docx'
    group_name = user_states["other_date_another_group"].get(user_id)
    if text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard)
        del user_states["other_date_another_group"][user_id]
        return

    await message.answer("üîé–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –æ–∂–∏–¥–∞–π—Ç–µ...")

    if not os.path.isfile(file_name):
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –µ–≥–æ —Å –¥–∏—Å–∫–∞
        success = await download_other_date(text)
        if not success:
            await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ª–∏–±–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç, –∏–∑–≤–∏–Ω–∏—Ç–µ", reply_markup=main_keyboard)
            del user_states["other_date"][user_id]
            return

    if os.path.isfile(file_name):
        try:
            file_from_pc = FSInputFile(file_name)
            await message.answer_document(file_from_pc, caption=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {text}", reply_markup=main_keyboard)
            await send_as_text_for_another_group(message, file_name, group_name)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", reply_markup=main_keyboard)
    else:
        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏–∑–≤–∏–Ω–∏—Ç–µ.", reply_markup=main_keyboard)

    del user_states["other_date_another_group"][user_id]

@dp.callback_query(lambda c: c.data.startswith("add_favorite_"))
async def handle_add_favorite(callback_query: types.CallbackQuery):
    group_name = callback_query.data.split("_")[-1]
    user_id = callback_query.from_user.id

    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
    add_favorite_group(user_id, group_name)
    await callback_query.answer(f"–ì—Ä—É–ø–ø–∞ {group_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ.")
    await callback_query.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

@dp.callback_query(lambda c: c.data == "cancel_favorite")
async def handle_cancel_favorite(callback_query: types.CallbackQuery):
    await callback_query.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ.")
    await callback_query.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤
@dp.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤")
async def schedule_zvon(message: types.Message, **kwargs):
    await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:\n\n{zvon_schedule}")


@dp.message(lambda message: message.from_user.id in user_states["check_schedule"])
async def check_schedule_another_group(message: types.Message):
    user_states["set_group_num"][message.from_user.id] = message.text


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –¥–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(lambda message: message.from_user.id in user_states["other_date"])
async def other_data_send(message: types.Message):
    user_id = message.from_user.id
    text = message.text
    file_name = f'schedule/{text}.docx'

    if text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard)
        del user_states["other_date"][user_id]
        return

    await message.answer("üîé–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –æ–∂–∏–¥–∞–π—Ç–µ...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    if not os.path.isfile(file_name):
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –µ–≥–æ —Å –¥–∏—Å–∫–∞
        success = await download_other_date(text)
        if not success:
            await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ª–∏–±–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç, –∏–∑–≤–∏–Ω–∏—Ç–µ", reply_markup=main_keyboard)
            del user_states["other_date"][user_id]
            return
    # –ü–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    if os.path.isfile(file_name):
        try:
            file_from_pc = FSInputFile(file_name)
            await message.answer_document(file_from_pc, caption=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {text}", reply_markup=main_keyboard)
            await send_as_text2(message, file_name)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.", reply_markup=main_keyboard)
    else:
        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏–∑–≤–∏–Ω–∏—Ç–µ.", reply_markup=main_keyboard)

    del user_states["other_date"][user_id]


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±–æ—Ç–∞
@dp.message()
async def any_mess(message: types.Message, **kwargs):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å –ø–æ–º–æ—â—å—é /help", reply_markup=main_keyboard)


scheduler = AsyncIOScheduler()

for days_offset in [0, 1, 2, 3]:
    scheduler.add_job(
        download_schedule,
        'interval',
        minutes=5,
        args=[days_offset],
        misfire_grace_time=30 * (days_offset + 1)
    )

scheduler.add_job(
    morning_schedule_task,
    CronTrigger(hour=7, minute=0),
    misfire_grace_time=300
)

scheduler.add_job(
    evening_schedule_task,
    CronTrigger(hour=20, minute=00),
    misfire_grace_time=300
)


async def start_scheduler():
    scheduler.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")


async def main():
    asyncio.create_task(start_scheduler())
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
